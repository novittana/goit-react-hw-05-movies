{"version":3,"file":"static/js/681.fe446e43.chunk.js","mappings":"4LAEO,SAASA,IACd,OACE,gBACEC,MAAO,CACLC,SAAU,QACVC,IAAK,IACLC,OAAQ,IACRC,MAAO,QACPC,OAAQ,QACRC,SAAU,SACVC,WAAY,kBACZC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAXpB,UAcE,SAAC,KAAD,CACEC,SAAS,EACTN,OAAO,KACPD,MAAM,KACNQ,UAAU,0BACVC,aAAc,CAAC,EACfC,aAAa,0BACbC,WAAW,UACXC,MAAM,aAIb,C,6HCxBc,SAASC,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,UAAS,IAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAdAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,IACbI,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,SAAAC,GACJR,EAAWQ,EAAKC,QACjB,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,IACAG,SAAQ,WACPZ,GAAa,EACd,GACJ,GAAE,CAACC,KAGF,2BACGF,IAAa,SAAC,IAAD,IACO,IAAnBF,EAAQgB,SACR,qEAA6ChB,KAE9CA,IACC,wBACGA,EAAQiB,KAAI,SAAAC,GAAM,OACjB,2BACE,oCAAYA,EAAOC,eAAeC,aAClC,uBAAIF,EAAOG,YAFJH,EAAOI,GADC,QAU5B,C,+LCvCOC,EAAW,8BACXC,EAAU,mCAMV,SAAeC,EAAtB,kCAmBI,SAAL,IAnBQ,OAmBR,oBAnBQ,WAAkCC,GAAlC,uFACmBC,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,wBAErB,CACEK,OAAQ,CACNC,QAASL,EACTE,KAAMA,GAAQ,KANhB,cAWJI,GAVMC,EADF,QAW0BtB,MAX1B,kBAYGsB,EAAStB,MAZZ,kEAoBA,SAAeuB,EAAtB,oCAiBI,SAAL,IAjBQ,OAiBR,oBAjBQ,WAAoCC,EAASP,GAA7C,uFACmBC,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAAuC,CAC5DK,OAAQ,CACNC,QAASL,EACTU,MAAOD,EACPP,KAAM,KALN,cASJI,GARMC,EADF,QAS0BtB,MAT1B,kBAUGsB,EAAStB,MAVZ,kEAkBA,SAAe0B,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACkBT,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,mBAAgCa,GAAU,CAC/DR,OAAQ,CACNC,QAASL,KAHR,cAOLM,GANMC,EADD,QAOyBtB,MAPzB,kBAQEsB,EAAStB,MARX,kEAWD,SAAe4B,EAAtB,+CAAO,OAAP,oBAAO,WAA8BD,GAA9B,uFACmBT,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,mBAAgCa,EAAhC,YAAkD,CACtER,OAAQ,CACNC,QAASL,KAHV,cAOLM,GANOC,EADF,QAOyBtB,MAPzB,kBAQIsB,EAAStB,MARb,kEAWE,SAAeF,EAAtB,+CAAO,OAAP,oBAAO,WAA+B6B,GAA/B,uFACkBT,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,mBAAgCa,EAAhC,YAAkD,CACvER,OAAQ,CACNC,QAASL,KAHR,cAOLM,GANMC,EADD,QAOyBtB,MAPzB,kBAQEsB,EAAStB,MARX,kEAWA,SAASqB,EAAqBrB,GASnC,OARIA,EAAK6B,cACP7B,EAAK6B,YAAL,yCAAqD7B,EAAK6B,cAGxD7B,EAAK8B,gBACP9B,EAAK8B,cAAL,yCAAuD9B,EAAK8B,gBAGvD9B,CACR,C","sources":["components/Loader.js","components/Reviews.jsx","servises/api.js"],"sourcesContent":["import { MagnifyingGlass } from 'react-loader-spinner';\n\nexport function Loader() {\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: '0',\n        zIndex: '2',\n        width: '100vw',\n        height: '100wh',\n        overflow: 'hidden',\n        background: 'rgba(0,0,0.0.2)',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <MagnifyingGlass\n        visible={true}\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"MagnifyingGlass-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"MagnifyingGlass-wrapper\"\n        glassColor=\"#c0efff\"\n        color=\"#e15b64\"\n      />\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { getMovieReviews } from '../servises/api';\nimport { Loader } from './Loader';\nimport { useParams } from 'react-router-dom';\n\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState('');\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    getMovieReviews(movieId)\n      .then(data => {\n        setReviews(data.results);\n      })\n      .catch(error => {\n        console.log(error);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId]);\n  \n  return (\n    <div>\n      {isLoading && <Loader />}\n      { reviews.length === 0 &&(\n        <p>We don't have any revievs for this movie {reviews}</p>\n      )}\n      {reviews && (\n        <ul>\n          {reviews.map(review => (\n            <li key={review.id}>\n              <h3>Author:{review.author_details.username}</h3>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n","import axios from 'axios';\n\n// axios.defaults.baseURL = 'https://api.themoviedb.org/';\n// axios.defaults.api_key = '8aba4e3419a44727b7eb66f35fce4fa2';\n\n  const BASE_URL = 'https://api.themoviedb.org/';\n  const API_KEY = '8aba4e3419a44727b7eb66f35fce4fa2';\n\n  /**\n   * getPopularFilmList description\n   * @return {JSON} obj response\n   */\n export async function getPopularFilmList(page) {\n    const response = await axios.get(\n      `${BASE_URL}3/trending/movie/day`,\n      {\n        params: {\n          api_key: API_KEY,\n          page: page || 1,\n        },\n      }\n    );\n\n    validateDataResponse(response.data);\n    return response.data;\n  }\n\n  /**\n   * getFilmListByKeyWord description\n   * @param  {string} keyWord description\n   * @return {JSON}  obj response\n   */\n export async function getFilmListByKeyWord(keyWord, page) {\n    const response = await axios.get(`${BASE_URL}3/search/movie`, {\n      params: {\n        api_key: API_KEY,\n        query: keyWord,\n        page: 1,\n      },\n    });\n\n    validateDataResponse(response.data);\n    return response.data;\n  }\n\n  /**\n   * getFilmFullInfo description\n   * @param  {number} filmId description\n   * @return {JSON}  obj response\n   */\n export async function getFilmFullInfo(filmId) {\n   const response = await axios.get(`${BASE_URL}3/movie/${filmId}`, {\n     params: {\n       api_key: API_KEY,\n     },\n   });\n\n   validateDataResponse(response.data);\n   return response.data;\n }\n\nexport async function getMovieActors(filmId) {\n   const response = await axios.get(`${BASE_URL}3/movie/${filmId}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n   });\n  \n  validateDataResponse(response.data);\n    return response.data;\n  }\n\n  export async function getMovieReviews(filmId) {\n    const response = await axios.get(`${BASE_URL}3/movie/${filmId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    validateDataResponse(response.data);\n    return response.data;\n  }\n\n  export function validateDataResponse(data) {\n    if (data.poster_path) {\n      data.poster_path = `https://image.tmdb.org/t/p/w500${data.poster_path}`;\n    }\n\n    if (data.backdrop_path) {\n      data.backdrop_path = `https://image.tmdb.org/t/p/w500${data.backdrop_path}`;\n    }\n\n    return data;\n  }\n\n"],"names":["Loader","style","position","top","zIndex","width","height","overflow","background","display","alignItems","justifyContent","visible","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","Reviews","useState","reviews","setReviews","isLoading","setIsLoading","movieId","useParams","useEffect","getMovieReviews","then","data","results","catch","error","console","log","finally","length","map","review","author_details","username","content","id","BASE_URL","API_KEY","getPopularFilmList","page","axios","params","api_key","validateDataResponse","response","getFilmListByKeyWord","keyWord","query","getFilmFullInfo","filmId","getMovieActors","poster_path","backdrop_path"],"sourceRoot":""}